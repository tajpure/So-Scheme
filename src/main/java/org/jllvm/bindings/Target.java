/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.jllvm.bindings;

public class Target {
  public static void LLVMInitializeAllTargetInfos() {
    TargetJNI.LLVMInitializeAllTargetInfos();
  }

  public static void LLVMInitializeAllTargets() {
    TargetJNI.LLVMInitializeAllTargets();
  }

  public static void LLVMInitializeAllTargetMCs() {
    TargetJNI.LLVMInitializeAllTargetMCs();
  }

  public static void LLVMInitializeAllAsmPrinters() {
    TargetJNI.LLVMInitializeAllAsmPrinters();
  }

  public static void LLVMInitializeAllAsmParsers() {
    TargetJNI.LLVMInitializeAllAsmParsers();
  }

  public static void LLVMInitializeAllDisassemblers() {
    TargetJNI.LLVMInitializeAllDisassemblers();
  }

  public static int LLVMInitializeNativeTarget() {
    return TargetJNI.LLVMInitializeNativeTarget();
  }

  public static LLVMOpaqueTargetData LLVMCreateTargetData(String StringRep) {
    long cPtr = TargetJNI.LLVMCreateTargetData(StringRep);
    return (cPtr == 0) ? null : new LLVMOpaqueTargetData(cPtr, false);
  }

  public static void LLVMAddTargetData(LLVMOpaqueTargetData arg0, LLVMOpaquePassManager arg1) {
    TargetJNI.LLVMAddTargetData(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaquePassManager.getCPtr(arg1));
  }

  public static void LLVMAddTargetLibraryInfo(LLVMOpaqueTargetLibraryInfotData arg0, LLVMOpaquePassManager arg1) {
    TargetJNI.LLVMAddTargetLibraryInfo(LLVMOpaqueTargetLibraryInfotData.getCPtr(arg0), LLVMOpaquePassManager.getCPtr(arg1));
  }

  public static String LLVMCopyStringRepOfTargetData(LLVMOpaqueTargetData arg0) {
    return TargetJNI.LLVMCopyStringRepOfTargetData(LLVMOpaqueTargetData.getCPtr(arg0));
  }

  public static LLVMByteOrdering LLVMByteOrder(LLVMOpaqueTargetData arg0) {
    return LLVMByteOrdering.swigToEnum(TargetJNI.LLVMByteOrder(LLVMOpaqueTargetData.getCPtr(arg0)));
  }

  public static long LLVMPointerSize(LLVMOpaqueTargetData arg0) {
    return TargetJNI.LLVMPointerSize(LLVMOpaqueTargetData.getCPtr(arg0));
  }

  public static long LLVMPointerSizeForAS(LLVMOpaqueTargetData arg0, long AS) {
    return TargetJNI.LLVMPointerSizeForAS(LLVMOpaqueTargetData.getCPtr(arg0), AS);
  }

  public static LLVMOpaqueType LLVMIntPtrType(LLVMOpaqueTargetData arg0) {
    long cPtr = TargetJNI.LLVMIntPtrType(LLVMOpaqueTargetData.getCPtr(arg0));
    return (cPtr == 0) ? null : new LLVMOpaqueType(cPtr, false);
  }

  public static LLVMOpaqueType LLVMIntPtrTypeForAS(LLVMOpaqueTargetData arg0, long AS) {
    long cPtr = TargetJNI.LLVMIntPtrTypeForAS(LLVMOpaqueTargetData.getCPtr(arg0), AS);
    return (cPtr == 0) ? null : new LLVMOpaqueType(cPtr, false);
  }

  public static java.math.BigInteger LLVMSizeOfTypeInBits(LLVMOpaqueTargetData arg0, LLVMOpaqueType arg1) {
    return TargetJNI.LLVMSizeOfTypeInBits(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(arg1));
  }

  public static java.math.BigInteger LLVMStoreSizeOfType(LLVMOpaqueTargetData arg0, LLVMOpaqueType arg1) {
    return TargetJNI.LLVMStoreSizeOfType(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(arg1));
  }

  public static java.math.BigInteger LLVMABISizeOfType(LLVMOpaqueTargetData arg0, LLVMOpaqueType arg1) {
    return TargetJNI.LLVMABISizeOfType(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(arg1));
  }

  public static long LLVMABIAlignmentOfType(LLVMOpaqueTargetData arg0, LLVMOpaqueType arg1) {
    return TargetJNI.LLVMABIAlignmentOfType(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(arg1));
  }

  public static long LLVMCallFrameAlignmentOfType(LLVMOpaqueTargetData arg0, LLVMOpaqueType arg1) {
    return TargetJNI.LLVMCallFrameAlignmentOfType(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(arg1));
  }

  public static long LLVMPreferredAlignmentOfType(LLVMOpaqueTargetData arg0, LLVMOpaqueType arg1) {
    return TargetJNI.LLVMPreferredAlignmentOfType(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(arg1));
  }

  public static long LLVMPreferredAlignmentOfGlobal(LLVMOpaqueTargetData arg0, LLVMOpaqueValue GlobalVar) {
    return TargetJNI.LLVMPreferredAlignmentOfGlobal(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueValue.getCPtr(GlobalVar));
  }

  public static long LLVMElementAtOffset(LLVMOpaqueTargetData arg0, LLVMOpaqueType StructTy, java.math.BigInteger Offset) {
    return TargetJNI.LLVMElementAtOffset(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(StructTy), Offset);
  }

  public static java.math.BigInteger LLVMOffsetOfElement(LLVMOpaqueTargetData arg0, LLVMOpaqueType StructTy, long Element) {
    return TargetJNI.LLVMOffsetOfElement(LLVMOpaqueTargetData.getCPtr(arg0), LLVMOpaqueType.getCPtr(StructTy), Element);
  }

  public static void LLVMDisposeTargetData(LLVMOpaqueTargetData arg0) {
    TargetJNI.LLVMDisposeTargetData(LLVMOpaqueTargetData.getCPtr(arg0));
  }

}
